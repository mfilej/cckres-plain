 
Medaplikacijsko  sodelovanje 

V  knjigi  ravno  tako  ni  ničesar  o  Internetu .  Daleč  od  tega ,  da  nova  Microsoft-ova  pisarna  ne  bi  poznala  Interneta .  Ravno  nasprotno  z  Internetom  se  MS  aplikacije  prav  dobro  razumejo .  A  zopet  smo  pred  enako  dilemo ,  kot  pri  Accessu .  Že  res ,  da  je  razvoj  Internet  aplikacij  v  novi  pisarni  preprost ,  a  kdo  ga  uporablja !  V  kolikor  želite  razvijati  aplikacije  za  Internet  morate  imeti  programiranje  v  malem  prstu . 

Newton

copy  c : \ autoexec.bat  a :

Kot  rešitev  takšnih  in  podobnih  problemov ,  so  se  kmalu  začeli  pojavljati  tudi  makro  urejevalniki ,  kjer  je  lahko  uporabnik  prvotno  posneti  makro  dopolnil ,  popravil  ali  pa  ga  celo  napisal  popolnoma  iz  nič .  V  naših  logih  je  bil  najbolj  znan  in  uporabljen  makro  jezik  iz  Borland-ovega  programa  Paradox ,  ki  se  je  imenoval  Pal  in  kasneje  ObjectPal .  No  od  tedaj  dalje  pa  je  pri  makrih  najpomembneje  naslednje :

3.  Izberite  želeni  makro  in  ga  odnesite  na  želeno  mesto .  To  pomeni ,  da  ga  z  levim  miškinim  gumbom  ' zgrabite ' ,  ga  nato  držite  in  prenesete  na  želeno  mesto  v  orodnih  vrsticah .

2.  Odprite  nov  dokument  ( ) . 

1.  Izberite  ( kot  vidite ,  lahko  pritisnete  tudi  ) .

Selection . TypeText  Text . . . Pozdravljen  svet . "

Če  smo  nekaj  naučili  slovničarja ,  ni  hudič ,  da  tega  ne  bi  znal  tudi  matematik .  No ,  poglejmo  torej ,  kako  se  bo  obnesel  Excel .

4.  Odpre  se  novo  okno ,  kamor  vnesete  ime  novega  makra .  Vnesite  ' Test '  in  pritisnite  OK .

'  Macro  recorded  27.12.97  by  Matjaž  Prtenjak

ActiveCell . FormulaR1C1  =  " Zdravo ,  Excel ! "

Najprej  moramo  seveda  ugotoviti ,  kako  bi  Word  prepričali ,  da  ustvari  pogovorno  okno ,  v  katerega  bo  uporabnik  vnašal .  Ob  koncu  knjige  boste  na  podobna  vprašanja  znali  odgovoriti  sami ,  preko  vgrajene  pomoči ,  knjige  ali  kako  drugače .  Sedaj  pa  mi  dovolite ,  da  vam  namignem  rešitev .  Uporabili  bomo  VBA-jevo  funkcijo  Ne  bodite  neučakani .  O  funkcijah  in  podobnem  bomo  govorili  kasneje  in  srčno  upam ,  da  vas  bo  tudi  takrat  tako  zanimalo ,  kaj  je  to ! .  Dobro ,  vemo ,  kaj  moramo  uporabiti ,  a  naletimo  na  problem .  Tega  ne  moremo  posneti !  Napisati  bomo  morali  sami !

End  Sub

6  helpfile  Določa ,  katera  datoteka  s  pomočjo  naj  se  požene .  Če  definirate  ta  parameter ,  morate  OBVEZNO  vnesti  tudi  naslednjega  ( context ) .  V  tem  primeru  se  na  oknu  pojavi  tudi  tretji  gumb ,  ki  ga  uporabnik  pritisne ,  če  potrebuje  pomoč .  Pomoč  v  oknih  je  zelo  dobro  zamišljena .  To  pa  pomeni  da  jo  je  kar  težko  napisati .  No ,  nekaj  o  tem  bomo  v  nadaljevanju  knjige  vseeno  tudi  povedali .

4.  Če  vse  združimo  in  rečemo :  “ V  aktivno  celico  zapiši  tisto ,  kar  je  zapisano  v  celici  A1 ” ,  dobimo  rešitev  ( ) .

3.  Sproti  glejte ,  kaj  snemate .  Pred  snemanjem  makra  lahko  odprete  okolje  VBA  in  ga  postavite  na  vidno  mesto  na  ekranu .  Ko  snemate  v  aplikaciji ,  lahko  v  VBA-ju  sproti  opazujete  izgradnjo  makra . 

4.  Uporabljajte  snemalnik  kot  učni  pripomoček .  To  se  delno  nanaša  na  prejšnjo  točko ,  ima  pa  tudi  drugi  pomen .  Ko  snemate  makre ,  si  jih  dobro  oglejte  in  poskusite  iz  njih  potegniti  čimveč  znanja .

2.  Z  miško  ga  označite  in  pritisnite  .  S  to  akcijo  ste  izbrani  del  prepisali  na  odlagališče .

2.  Na  zavihku  vključite  opcijo  in  to  je  vse . 

Če  pogledamo  naša  imena ,  lahko  potegnemo  enačaj  tudi  z  imeni  spremenljivk ,  le  da  spremenljivke  ne  smejo  imeti  presledkov .

dolgo  ime  '  v  imenu  je  presledek

int  Integer

Operator  +  ( seštevanje ) Nizi  znakovzdruevanje 

Sub  test1 ( )

Kako  si  to  zapomniti ?  Preprosto ,  če  je  kjerkoli  vrednost  ,  potem  je  rezultat  !  Če  ni  je  pa  kjerkoli  ,  potem  je  rezultat  !  Če  in  samo  če  je  vse  ,  potem  je  rezultat  !  Ko  berem  prejšnji  stavek ,  mislim ,  da  bi  lahko  tisto  besedico  ' preprosto '  preprosto  izpustil .  Kaj  menite ?

( not  ( a  >  10 ) )  and  ( not  ( a  <  15 ) )  ‘  vedno  false

Operator  OR  ( ali ) Or 

null  false  null

Za  to  konstanto  uporabi  tip  .  Če  veste ,  da  jo  boste  uporabljali  v  povezavi  z  vrednostmi ,  je  bolje ,  da  VBA-ju  takoj  naročite ,  da  naj  zanjo  pripravi  podatkovni  tip  .  S  tem  se  znebite  že  omenjenih  samodejnih  konverzij  iz  v  :

Natančnost  –  3Natannost  Operatorjinatannost 

Na  funkcije  lahko  gledamo  kot  na  specialiste ,  ki  znajo  izvršiti  določeno  nalogo .  Seveda  vas  kot  programerja  ne  zanima ,  kako  specialist  naredi  nalogo ;  resnično  pomembno  je  samo ,  da  je  naloga  opravljena  in  vse ,  kar  lahko  zahteva ,  so  vhodni  podatki .  V  programu  je  funkcija  del  kode  z  imenom .  Pod  tem  imenom  je  znana  programerju  in  pod  tem  imenom  jo  tudi  pokliče ,  kadar  koli  jo  potrebuje .

Privzeti  parametriParametriprivzeti 

V  takšnih  primerih  lahko  uporabniku  uporabo  olajšamo  in  rečemo ,  da  je  parameter  po  privzeti  vrednosti  prazen .  Če  uporabnik  parametra  ne  bo  podal ,  ga  bo  VBA  upošteval  kot  praznega .  Za  kaj  takšnega  moramo  definicijo  glave  procedure  malce  spremeniti :

Popolnoma  vse ,  kar  smo  povedali  za  procedure ,  velja  tudi  za  funkcije .  Znajo  pa  funkcije  še  nekaj  več .  Kot  rezultat  namreč  nekaj  vrnejo .  Definicija  funkcije  je  sledeča :

Ko  v  nekem  trenutku  potrebujete  več  vrstic  kode ,  ki  ste  jih  nekje  že  napisali ,  ustvarite  novo  proceduro / funkcijo  in  vanjo  prekopirajte  omenjene  vrstice .  Prekopirano  kodo  še  malce  priredite  in  uredite  ( glejte  naslednje  namige ) . 

V  kolikor  boste  največ  časa  porabili  za  delo  z  Excel-om ,  si  takšne  procedure  shranite  v  mapo  ( glejte  naslednje  poglavje ) .  V  kolikor  pa  boste  delali  z  Word-om ,  boste  za  te  potrebe  uporabili  podlogo  .

st1  =  CInt ( ( 100  *  Rnd )  +  1 )

MsgBox  ( " Število  je  sodo ! " )

Nizi  znakovleftnje  Nizi  znakovrightje  Nizi  znakovmidanje  Izgled  funkcij  je  sledeč :

Sub  For _ 5 ( )

Sub  For _ 5 ( )

Selection . TypeParagraph

Next

Sub  Matematika _ 2 ( )

<  60 %  1

odgovor  =  InputBox ( " Vnesite  število  vprašanj  na  testu . . . " ,  " TEST " ,  " " )

vseh  =  CInt ( odgovor )

Case  Is  <  60

Najlažje  boste  zanko  razumeli ,  če  jo  prevedem  v  slovenščino .  pomeni  dokler  in  zanko  lahko  prevedemo  kot :  “ Ponavljaj ,  dokler  je  pogoj  izpolnjen ! ” .

stevec  =  stevec  +  1  '  NE  POZABITE  ! ! ! ,  sicer  stevec  ne  vpliva  na  pogoj  ( vedno  je  enak  1 )

MsgBox  ( " Pozdravljeni ,  ste  v  sistemu . . . " )

Do

Lahko  razbijemo  na

While  IsNumeric ( Prebrano )  ‘  dokler  vnaša  števila

Do  nastavitev  pridete  preko  menija  z  izbiro  .  Odpre  se  vam  pogovorno  okno  s  štirimi  zavihki ,  ki  si  ga  lahko  ogledate  na  sliki :

To  je  pravzaprav  urejevalnik  teksta ,  ki  pa  se  zaveda  strukture  BASIC-a  in  nam  ob  vnosu  pomaga  na  različne  načine .  V  njem  lahko  vidimo  samo  eno  proceduro  naenkrat ,  ali  pa  vidimo  vse  procedure ,  ki  sestavljajo  neko  enoto  ( glejte  nastavitve ) .

Vse  kar  bom  opisoval ,  najdete  v  meniju  .

End  Type

Globalne  spremenljivke  deklariramo  na  vrhu  modula  ( v  sekciji  napovedi ) ,  tam  kot  nove  podatkovne  tipe .

Kot  da  vse ,  kar  smo  povedali ,  ni  dovolj ,  lahko  spremenljivki  rečemo  celo ,  naj  bo  javna .  To  pomeni ,  da  je  takšna  spremenljivka  vidna  ne  samo  v  modulu ,  temveč  vsepovsod  –  tudi  v  drugih  modulih .  Popolno  nasprotje  pa  so  privatne  spremenljivke ,  ki  so  vidne  samo  znotraj  modula .  Oboje  se  nanaša  samo  na  globalne  spremenljivke .

Private  VidnaSamoTukaj  As  Integer

‘  in  tako  dalje …

End  Sub

Vrnitev  iz  Zamenjaj _ Pravilno  A  =  20  B  =  10

GeneracijaN  =  GeneracijaN1  +  GeneracijaN2

End  Function

št.  rekur .  1  3  5  9  15  25  41  67  109  177  287  465  753  1219  1973

ukazi  prevajalniku ,

deklaracije  novih  podatkovnih  tipov ,

Majhne  stvari  spreminjajo  svet … 

Aldous  Huxley

postavite  Word  v  način  predpregleda !  Pa  se  poskusimo  z  Word-om  malce  resneje  poigrati :

If  . FoundFiles . Count  =  1  Then

Selection . TypeText  . FoundFiles ( Stevec )

Zapiranje  dokumentaDokumentzapiranje 

Sub  Znaki ( )

End  Sub

Stavke  Sentences ( indeks )  Range

Dim  Obmocje  As  Range  ' OK

Kot  je  razvidno ,  pred  vsak  stavek  postavimo  zaporedno  številko ,  nato  pa  postavimo  novo  območje ,  ki  je  pravzaprav  konec  izbranega  stavka .  Sem  ' pritisnemo '  novo  vrstico .

Set  mojeObmocje1  =  mojeObmocje . Duplicate

Objekta  za  iskanje  in  zamenjevanje  tekstaIskanje  Zamenjevanje 

Kako  poudariti  tekst ,  ki  se  nahaja  med  nekimi  posebnimi  znaki ? 

MatchCase  Ali  je  ob  iskanju  velikost  črk  pomembna .

Objekta  ne  vsebuje  samo  ,  temveč  tudi  .  Med  njima  je  majhna  razlika ,  ki  pa  je  na  ekranu  precej  opazna .  V  primeru  objekta  se  pri  uspešnem  iskanju  spremni  izbira ,  v  primeru  pa  se  spremeni  samo  območje ,  izbor  pa  ostane  enak .  Poglejmo  si  podoben  primer  kot  prej ,  le  da  tokrat  z  drugim  objektom .  Bodite  pozorni  na  razliko ,  saj  ta  makro  izbora  ne  zamenja !

Mnogokrat  pa  želimo  delati  samo  z  določenimi  celicami  oziroma  samo  z  določeno  celico .  V  tem  primeru  bomo  seveda  uporabili  objekt  ,  ki  ga  vsebuje  objekt  .  sprejme  dva  indeksa ,  saj  je  potrebno  določiti  vrstico  in  kolono .  To  pa ,  kot  že  vemo  naredimo  tako ,  da  pač  v  oklepaj  vpišemo  dve  števili .  Pri  objektu  pa  moram  omeniti  še  nekaj  zelo  pomembnega .  Čeprav  bi  pričakovali  drugače ,  z  objektom  direktno  zelo  težko  delamo ,  saj  v  celico  ( direktno )  ne  moremo  niti  pisati .  Za  vsakršno  oblikovanje ,  vnašanje  teksta ,  popravljanje  teksta ,  vnos  slik …  bo  potrebno  izbrati  objekt  ,  ki  ga  vsebuje  in  seveda  predstavlja  območje  izbrane  celice .  Kako  torej  nekaj  vnesti  v  celico ? 

ActiveDocument . Tables ( 1 ) . Cell ( 1,1 ) . Range . Text  =  " Tole  gre  v  prvo  celico "

Set  mojNoviStil  =  ActiveDocument . Styles.Add ( Name . . . NovStil " ,  Type : =  wdStyleTypeParagraph )

Izkušeni  uporabniki  veliko  uporabljajo  stile ,  makri  pa  v  večini  primerov  ne .  Drugače  pa  je  s  polji ,  ki  jih  uporabniki  ne  uporabljajo  veliko  ( vsaj  ne  zavedno  Če  rečemo ,  da  želimo  številčiti  strani ,  smo  uporabili  polje ,  če  rečemo ,  da  želimo  kazalo ,  smo  uporabili  polje … Zato  pravim ,  da  polj  v  večini  ne  uporabljamo  zavestno . ) ,  makri  pa  jih  precej  bolj  obožujejo .  Poglejmo  si  torej ,  kako  se  razumejo  polja  in  VBA .

Dokument  se  lahko  odziva  na  sledeče  dogodke :

EntireRow  '  celotna  vrstica

Za  lastnost  sem  omenil ,  da  je  precej  nepredvidljiva .  Težko  je  oceniti ,  kako  velik  kos  lista  je  uporabnik  že  naslovil ,  zato  je  kar  smiselno ,  da  Excel  povprašamo  po  tem  podatku .  Vsako  območje  zna  povedati ,  kako  je  veliko  oz.  natančneje  opisati  svoje  meje .  To  stori  v  obliki  niza  znakov ,  ki  ga  vrne  lastnost  .  Kot  primer  si  poglejmo  makro ,  ki  uporabniku  v  okno  izpiše  meje  trenutno  uporabljenega  območja :

End  Sub

Target . Select

SheetDeactivate  Se  zgodi ,  ko  uporabnik  izbere  drugi  list  v  zvezku .  Uporabljajte  ga  namesto  lastnosti  OnSheetDeactivate .

napaka :  ‘  če  se  pojavi  napaka  VBA  skoči  sem

2.  Napišete  prestreznik  napake .  To  je  poseben  del  kode  ( v  našem  primeru  tista ,  ki  sledi  labeli  ) ,  ki  skrbi  za  napake .

Povratek  iz  prestreznika 

Select  Case  StNapake

Case  Napaka _ DISK _ NI _ PRIPRAVLJEN

Case  Napaka _ NI _ POTI

opis  =  " Napačna  pot  do  datoteke  . . . " :  ikona  =  48

Case  Else

Napakeorodja  za  razhroevanje  Najprej  si  poglejmo ,  katera  orodja  nam  VBA  sploh  nudi  oziroma  do  katerih  imamo  dostop  kar  preko  vrstice  s  hitrimi  gumbi  ( vrstica  ) .  Pred  razlago  si  najprej  oglejmo  sliko :

Preklop  prekinitve  Z  njim  postavite  prekinitveno  točko  oziroma  jo  zbrišete ,  če  je  postavljena .  Ko  program  naleti  na  prekinitveno  točko ,  se  ustavi !

Napakerazhroevanje  Poglejmo  si  sedaj  raje  konkreten  primer  razhroščevanja ,  v  katerem  bomo  uporabili  vse  možnosti ,  ki  nam  jih  VBA  nudi .  Pravzaprav  tukaj  programa  ne  bomo  razhroščevali ,  saj  v  njem  ne  bo  napak .  Pogledali  pa  si  bomo ,  kako  se  program  ( makro )  sploh  pregleduje .

Obseg  =  2  *  PI  *  r

Neposredno  okno 

1.  Podatki ,  ki  ste  jih  prenesli ,  so  statični ,  kar  pomeni ,  da  se  sprememba  podatkov  v  prvem  programu  ne  odrazi  v  spremembi  podatkov  v  drugem  programu .

Na  pravilno  delovanje  vpliva  predvsem  število  preostalih  pognanih  programov .  Manj  kot  je  pognanih  programov ,  večja  je  verjetnost ,  da  vam  bo  ActiveX  deloval !

Razlika  v  zasnovi 

Takšni  makri  pa  od  tedaj  dalje  niso  več  kompatibilni  nazaj ,  kar  pomeni ,  da  jih  od  tega  trenutka  v  nižjih  različicah  Word-a  ne  moremo  več  uporabljati . 

WordBasic . FormatParagraph  . Alignment  =  3 ,  . Before  =  " 0.2  cm " ,  . After  =  " 0.2  cm "

Stvar  pa  se  malce  zaplete  pri  funkcijah ,  ki  jih  je  potrebno  zapreti  v  oglate  oklepaje .  Poglejmo  si  torej  nekaj  primerov :
